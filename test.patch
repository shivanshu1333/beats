diff --git a/filebeat/fb.json b/filebeat/fb.json
new file mode 100644
index 0000000000..948640c5ee
--- /dev/null
+++ b/filebeat/fb.json
@@ -0,0 +1,229 @@
+{
+    "type": "record",
+    "namespace": "com.ing.log",
+    "name": "LogEvent",
+    "fields": [
+        {
+            "name": "schemaVersion",
+            "type": "long",
+            "default": 3
+        },
+        {
+            "name": "eventClass",
+            "type": {
+                "type": "enum",
+                "namespace": "com.ing.log",
+                "name": "EventClass",
+                "symbols": [
+                    "TECH",
+                    "FUNC",
+                    "AUDIT",
+                    "SECURITY"
+                ]
+            },
+            "default": "TECH"
+        },
+        {
+            "name": "eventType",
+            "type": "string",
+            "default": ""
+        },
+        {
+            "name": "message",
+            "type": "string",
+            "default": ""
+        },
+        {
+            "name": "arguments",
+            "aliases": [
+                "messages"
+            ],
+            "type": {
+                "type": "array",
+                "items": "string"
+            },
+            "default": [
+            ]
+        },
+        {
+            "name": "metrics",
+            "type": {
+                "type": "map",
+                "values": "double"
+            },
+            "default": {
+            }
+        },
+        {
+            "name": "datacenter",
+            "type": "string",
+            "default": ""
+        },
+        {
+            "name": "environment",
+            "type": "string",
+            "default": ""
+        },
+        {
+            "name": "host",
+            "type": "string",
+            "default": ""
+        },
+        {
+            "name": "component",
+            "type": "string",
+            "default": ""
+        },
+        {
+            "name": "componentVersion",
+            "type": "string",
+            "default": ""
+        },
+        {
+            "name": "logger",
+            "type": "string",
+            "default": ""
+        },
+        {
+            "name": "thread",
+            "type": "string",
+            "default": ""
+        },
+        {
+            "type": {
+                "type": "enum",
+                "namespace": "com.ing.log",
+                "name": "LogLevel",
+                "symbols": [
+                    "TRACE",
+                    "DEBUG",
+                    "INFO",
+                    "WARN",
+                    "ERROR"
+                ]
+            },
+            "name": "level",
+            "default": "INFO"
+        },
+        {
+            "name": "cmdbId",
+            "type": "string",
+            "default": ""
+        },
+        {
+            "name": "user",
+            "type": "string",
+            "default": ""
+        },
+        {
+            "name": "executer",
+            "type": "string",
+            "default": ""
+        },
+        {
+            "name": "requestor",
+            "aliases": [
+                "requester"
+            ],
+            "type": "string",
+            "default": ""
+        },
+        {
+            "name": "userSession",
+            "type": "string",
+            "default": ""
+        },
+        {
+            "name": "requesterSession",
+            "type": "string",
+            "default": ""
+        },
+        {
+            "name": "executerSession",
+            "type": "string",
+            "default": ""
+        },
+        {
+            "name": "traceId",
+            "aliases": [
+                "request_id"
+            ],
+            "type": "string",
+            "default": ""
+        },
+        {
+            "name": "transactionId",
+            "type": "string",
+            "default": ""
+        },
+        {
+            "name": "spanId",
+            "type": "string",
+            "default": ""
+        },
+        {
+            "name": "parentSpanId",
+            "type": "string",
+            "default": ""
+        },
+        {
+            "name": "errorCode",
+            "type": "string",
+            "default": ""
+        },
+        {
+            "name": "errorMessage",
+            "type": "string",
+            "default": ""
+        },
+        {
+            "name": "errorTrail",
+            "type": "string",
+            "default": ""
+        },
+        {
+            "name": "stacktrace",
+            "type": "string",
+            "default": ""
+        },
+        {
+            "name": "attributes",
+            "type": {
+                "type": "map",
+                "values": "string"
+            },
+            "default": {
+            }
+        },
+        {
+            "name": "operation",
+            "type": "string",
+            "default": ""
+        },
+        {
+            "name": "hashKey",
+            "type": "string",
+            "default": ""
+        },
+        {
+            "name": "initVector",
+            "type": "string",
+            "default": ""
+        },
+        {
+            "name": "encrypted",
+            "type": "string",
+            "default": ""
+        },
+        {
+            "name": "confidential",
+            "type": {
+                "type": "map",
+                "values": "string"
+            },
+            "default": {}
+        }
+    ]
+}
+
+
diff --git a/filebeat/filebeat.yml b/filebeat/filebeat.yml
index 390305dd34..8d7b797b55 100644
--- a/filebeat/filebeat.yml
+++ b/filebeat/filebeat.yml
@@ -11,21 +11,24 @@
 # configuration file.
 
 # ============================== Filebeat inputs ===============================
-
 filebeat.inputs:
-
+  - type: log
+    enabled: true
+    paths:
+      - /Users/shivashr/AppD/root/Log4j2-Sample/logs/*.log
+#filebeat.inputs:
 # Each - is an input. Most options can be set at the input level, so
 # you can use different inputs for various configurations.
 # Below are the input specific configurations.
 
-- type: log
+#- type: log
 
   # Change to true to enable this input configuration.
-  enabled: false
+#  enabled: false
 
   # Paths that should be crawled and fetched. Glob based paths.
-  paths:
-    - /var/log/*.log
+#  paths:
+#    - /var/log/*.log
     #- c:\programdata\elasticsearch\logs\*
 
   # Exclude lines. A list of regular expressions to match. It drops the lines that are
@@ -63,14 +66,14 @@ filebeat.inputs:
   #multiline.match: after
 
 # filestream is an experimental input. It is going to replace log input in the future.
-- type: filestream
+#- type: filestream
 
   # Change to true to enable this input configuration.
-  enabled: false
+#  enabled: false
 
   # Paths that should be crawled and fetched. Glob based paths.
-  paths:
-    - /var/log/*.log
+#  paths:
+#    - /var/log/*.log
     #- c:\programdata\elasticsearch\logs\*
 
   # Exclude lines. A list of regular expressions to match. It drops the lines that are
@@ -105,8 +108,8 @@ filebeat.config.modules:
 
 # ======================= Elasticsearch template setting =======================
 
-setup.template.settings:
-  index.number_of_shards: 1
+#setup.template.settings:
+#  index.number_of_shards: 1
   #index.codec: best_compression
   #_source.enabled: false
 
@@ -116,7 +119,7 @@ setup.template.settings:
 # The name of the shipper that publishes the network data. It can be used to group
 # all the transactions sent by a single shipper in the web interface.
 #name:
-
+#filebeat.registry_file: registry
 # The tags of the shipper are included in their own field with each
 # transaction published.
 #tags: ["service-X", "web-tier"]
@@ -142,7 +145,7 @@ setup.template.settings:
 
 # Starting with Beats version 6.0.0, the dashboards are loaded via the Kibana API.
 # This requires a Kibana endpoint configuration.
-setup.kibana:
+#setup.kibana:
 
   # Kibana Host
   # Scheme and port can be left out and will be set to the default (http and 5601)
@@ -172,10 +175,18 @@ setup.kibana:
 
 # Configure what output to use when sending the data collected by the beat.
 
+# console output using json codec
+
+output.console:
+  codec.otlp:
+#    file: "fb.json"
+#    pretty: true
+#    escape_html: false
+
 # ---------------------------- Elasticsearch Output ----------------------------
-output.elasticsearch:
+#output.elasticsearch:
   # Array of hosts to connect to.
-  hosts: ["localhost:9200"]
+#  hosts: ["localhost:9200"]
 
   # Protocol - either `http` (default) or `https`.
   #protocol: "https"
diff --git a/filebeat/main.go b/filebeat/main.go
index b7f128a266..435dcf4c33 100644
--- a/filebeat/main.go
+++ b/filebeat/main.go
@@ -18,6 +18,7 @@
 package main
 
 import (
+	"fmt"
 	"os"
 
 	"github.com/elastic/beats/v7/filebeat/cmd"
@@ -33,6 +34,7 @@ import (
 // Finally, input uses the registrar information, on restart, to
 // determine where in each file to restart a harvester.
 func main() {
+	fmt.Fprintf(os.Stderr, "test\n")
 	if err := cmd.Filebeat(inputs.Init, cmd.FilebeatSettings()).Execute(); err != nil {
 		os.Exit(1)
 	}
diff --git a/go.mod b/go.mod
index d955e91f4b..821178a417 100644
--- a/go.mod
+++ b/go.mod
@@ -89,16 +89,15 @@ require (
 	github.com/gofrs/flock v0.7.2-0.20190320160742-5135e617513b
 	github.com/gofrs/uuid v3.3.0+incompatible
 	github.com/gogo/protobuf v1.3.1
-	github.com/golang/protobuf v1.4.3
+	github.com/golang/protobuf v1.5.2
 	github.com/golang/snappy v0.0.1
 	github.com/gomodule/redigo v1.8.3
 	github.com/google/flatbuffers v1.7.2-0.20170925184458-7a6b2bf521e9
-	github.com/google/go-cmp v0.5.2
+	github.com/google/go-cmp v0.5.5
 	github.com/google/gopacket v1.1.18-0.20191009163724-0ad7f2610e34
 	github.com/google/uuid v1.1.2
 	github.com/gorhill/cronexpr v0.0.0-20180427100037-88b0669f7d75
 	github.com/gorilla/mux v1.7.2
-	github.com/grpc-ecosystem/grpc-gateway v1.13.0 // indirect
 	github.com/h2non/filetype v1.1.1-0.20201130172452-f60988ab73d5
 	github.com/hashicorp/go-multierror v1.1.0
 	github.com/hashicorp/go-retryablehttp v0.6.6
@@ -116,6 +115,7 @@ require (
 	github.com/kolide/osquery-go v0.0.0-20200604192029-b019be7063ac
 	github.com/konsorten/go-windows-terminal-sequences v1.0.2 // indirect
 	github.com/lib/pq v1.1.2-0.20190507191818-2ff3cb3adc01
+	github.com/linkedin/goavro v2.1.0+incompatible // indirect
 	github.com/magefile/mage v1.11.0
 	github.com/mailru/easyjson v0.7.1 // indirect
 	github.com/mattn/go-colorable v0.1.6
@@ -163,6 +163,7 @@ require (
 	go.elastic.co/ecszap v0.3.0
 	go.elastic.co/go-licence-detector v0.4.0
 	go.etcd.io/bbolt v1.3.4
+	go.opentelemetry.io/proto/otlp v0.9.0 // indirect
 	go.uber.org/atomic v1.5.0
 	go.uber.org/multierr v1.3.0
 	go.uber.org/zap v1.14.0
@@ -177,8 +178,8 @@ require (
 	golang.org/x/tools v0.0.0-20200731060945-b5fad4ed8dd6
 	google.golang.org/api v0.15.0
 	google.golang.org/genproto v0.0.0-20210303154014-9728d6b83eeb
-	google.golang.org/grpc v1.29.1
-	google.golang.org/protobuf v1.25.0
+	google.golang.org/grpc v1.37.1
+	google.golang.org/protobuf v1.26.0
 	gopkg.in/inf.v0 v0.9.1
 	gopkg.in/jcmturner/gokrb5.v7 v7.5.0
 	gopkg.in/mgo.v2 v2.0.0-20160818020120-3f83fa500528
diff --git a/go.sum b/go.sum
index dc1deb6297..abefdf2467 100644
--- a/go.sum
+++ b/go.sum
@@ -118,6 +118,7 @@ github.com/andrewkroh/sys v0.0.0-20151128191922-287798fe3e43 h1:WFwa9pqou0Nb4Ddf
 github.com/andrewkroh/sys v0.0.0-20151128191922-287798fe3e43/go.mod h1:tJPYQG4mnMeUtQvQKNkbsFrnmZOg59Qnf8CcctFv5v4=
 github.com/antihax/optional v0.0.0-20180407024304-ca021399b1a6 h1:uZuxRZCz65cG1o6K/xUqImNcYKtmk9ylqaH0itMSvzA=
 github.com/antihax/optional v0.0.0-20180407024304-ca021399b1a6/go.mod h1:V8iCPQYkqmusNa815XgQio277wI47sdRh1dUOLdyC6Q=
+github.com/antihax/optional v1.0.0/go.mod h1:uupD/76wgC+ih3iEmQUL+0Ugr19nfwCT1kdvxnR2qWY=
 github.com/antlr/antlr4 v0.0.0-20200820155224-be881fa6b91d h1:OE3kzLBpy7pOJEzE55j9sdgrSilUPzzj++FWvp1cmIs=
 github.com/antlr/antlr4 v0.0.0-20200820155224-be881fa6b91d/go.mod h1:T7PbCXFs94rrTttyxjbyT5+/1V8T2TYDejxUfHJjw1Y=
 github.com/apache/thrift v0.13.1-0.20200603211036-eac4d0c79a5f h1:33BV5v3u8I6dA2dEoPuXWCsAaHHOJfPtdxZhAMQV4uo=
@@ -178,6 +179,7 @@ github.com/cloudfoundry/sonde-go v0.0.0-20171206171820-b33733203bb4 h1:cWfya7mo/
 github.com/cloudfoundry/sonde-go v0.0.0-20171206171820-b33733203bb4/go.mod h1:GS0pCHd7onIsewbw8Ue9qa9pZPv2V88cUZDttK6KzgI=
 github.com/cncf/udpa/go v0.0.0-20191209042840-269d4d468f6f h1:WBZRG4aNOuI15bLRrCgN8fCq8E5Xuty6jGbmSNEvSsU=
 github.com/cncf/udpa/go v0.0.0-20191209042840-269d4d468f6f/go.mod h1:M8M6+tZqaGXZJjfX53e64911xZQV5JYwmTeXPW+k8Sc=
+github.com/cncf/udpa/go v0.0.0-20201120205902-5459f2c99403/go.mod h1:WmhPx2Nbnhtbo57+VJT5O0JRkEi1Wbu0z5j0R8u5Hbk=
 github.com/codegangsta/inject v0.0.0-20150114235600-33e0aa1cb7c0 h1:sDMmm+q/3+BukdIpxwO365v/Rbspp2Nt5XntgQRXq8Q=
 github.com/codegangsta/inject v0.0.0-20150114235600-33e0aa1cb7c0/go.mod h1:4Zcjuz89kmFXt9morQgcfYZAYZ5n8WHjt81YYWIwtTM=
 github.com/containerd/cgroups v0.0.0-20190919134610-bf292b21730f h1:tSNMc+rJDfmYntojat8lljbt1mgKNpTxUZJsSzJ9Y1s=
@@ -323,6 +325,7 @@ github.com/envoyproxy/go-control-plane v0.9.0/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymF
 github.com/envoyproxy/go-control-plane v0.9.1-0.20191026205805-5f8ba28d4473/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=
 github.com/envoyproxy/go-control-plane v0.9.4 h1:rEvIZUSZ3fx39WIi3JkQqQBitGwpELBIYWeBVh6wn+E=
 github.com/envoyproxy/go-control-plane v0.9.4/go.mod h1:6rpuAdCZL397s3pYoYcLgu1mIlRU8Am5FuJP05cCM98=
+github.com/envoyproxy/go-control-plane v0.9.9-0.20210217033140-668b12f5399d/go.mod h1:cXg6YxExXjJnVBQHBLXeUAgxn2UodCpnH306RInaBQk=
 github.com/envoyproxy/protoc-gen-validate v0.1.0 h1:EQciDnbrYxy13PgWoY8AqoxGiPrpgBZ1R8UNe3ddc+A=
 github.com/envoyproxy/protoc-gen-validate v0.1.0/go.mod h1:iSmxcyjqTsJpI2R4NaDN7+kN2VEUnK/pcBlmesArF7c=
 github.com/evanphx/json-patch v4.9.0+incompatible h1:kLcOMZeuLAJvL2BPWLMIj5oaZQobrkAqrL+WFZwQses=
@@ -411,6 +414,9 @@ github.com/golang/protobuf v1.4.1/go.mod h1:U8fpvMrcmy5pZrNK1lt4xCsGvpyWQ/VVv6QD
 github.com/golang/protobuf v1.4.2/go.mod h1:oDoupMAO8OvCJWAcko0GGGIgR6R6ocIYbsSw735rRwI=
 github.com/golang/protobuf v1.4.3 h1:JjCZWpVbqXDqFVmTfYWEVTMIYrL/NPdPSCHPJ0T/raM=
 github.com/golang/protobuf v1.4.3/go.mod h1:oDoupMAO8OvCJWAcko0GGGIgR6R6ocIYbsSw735rRwI=
+github.com/golang/protobuf v1.5.0/go.mod h1:FsONVRAS9T7sI+LIUmWTfcYkHO4aIWwzhcaSAoJOfIk=
+github.com/golang/protobuf v1.5.2 h1:ROPKBNFfQgOUMifHyP+KYbvpjbdoFNs+aK7DXlji0Tw=
+github.com/golang/protobuf v1.5.2/go.mod h1:XVQd3VNwM+JqD3oG2Ue2ip4fOMUkwXdXDdiuN0vRsmY=
 github.com/golang/snappy v0.0.1 h1:Qgr9rKW7uDUkrbSmQeiDsGa8SjGyCOGtuasMWwvp2P4=
 github.com/golang/snappy v0.0.1/go.mod h1:/XxbfmMg8lxefKM7IXC3fBNl/7bRcc72aCRzEWrmP2Q=
 github.com/gomodule/redigo v1.8.3 h1:HR0kYDX2RJZvAup8CsiJwxB4dTCSC0AaUq6S4SiLwUc=
@@ -427,6 +433,8 @@ github.com/google/go-cmp v0.4.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/
 github.com/google/go-cmp v0.5.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
 github.com/google/go-cmp v0.5.2 h1:X2ev0eStA3AbceY54o37/0PQ/UWqKEiiO2dKL5OPaFM=
 github.com/google/go-cmp v0.5.2/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
+github.com/google/go-cmp v0.5.5 h1:Khx7svrCpmxxtHBq5j2mp/xVjsi8hQMfNLvJFAlrGgU=
+github.com/google/go-cmp v0.5.5/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
 github.com/google/gofuzz v1.0.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=
 github.com/google/gofuzz v1.1.0 h1:Hsa8mG0dQ46ij8Sl2AYJDUv1oA9/d6Vk+3LG99Oe02g=
 github.com/google/gofuzz v1.1.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=
@@ -462,6 +470,7 @@ github.com/gregjones/httpcache v0.0.0-20180305231024-9cad4c3443a7 h1:pdN6V1QBWet
 github.com/gregjones/httpcache v0.0.0-20180305231024-9cad4c3443a7/go.mod h1:FecbI9+v66THATjSRHfNgh1IVFe/9kFxbXtjV0ctIMA=
 github.com/grpc-ecosystem/grpc-gateway v1.13.0 h1:sBDQoHXrOlfPobnKw69FIKa1wg9qsLLvvQ/Y19WtFgI=
 github.com/grpc-ecosystem/grpc-gateway v1.13.0/go.mod h1:8XEsbTttt/W+VvjtQhLACqCisSPWTxCZ7sBRjU6iH9c=
+github.com/grpc-ecosystem/grpc-gateway v1.16.0/go.mod h1:BDjrQk3hbvj6Nolgz8mAMFbcEtjT1g+wF4CSlocrBnw=
 github.com/h2non/filetype v1.1.1-0.20201130172452-f60988ab73d5 h1:xI88renBpIJws9OfEQq4Dng10OppnY5u9bTok/GDFEI=
 github.com/h2non/filetype v1.1.1-0.20201130172452-f60988ab73d5/go.mod h1:319b3zT68BvV+WRj7cwy856M2ehB3HqNOt6sy1HndBY=
 github.com/hashicorp/cronexpr v1.1.0 h1:dnNsWtH0V2ReN7JccYe8m//Bj14+PjJDntR1dz0Cixk=
@@ -564,6 +573,8 @@ github.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=
 github.com/lib/pq v1.0.0/go.mod h1:5WUZQaWbwv1U+lTReE5YruASi9Al49XbQIvNi/34Woo=
 github.com/lib/pq v1.1.2-0.20190507191818-2ff3cb3adc01 h1:EPw7R3OAyxHBCyl0oqh3lUZqS5lu3KSxzzGasE0opXQ=
 github.com/lib/pq v1.1.2-0.20190507191818-2ff3cb3adc01/go.mod h1:5WUZQaWbwv1U+lTReE5YruASi9Al49XbQIvNi/34Woo=
+github.com/linkedin/goavro v2.1.0+incompatible h1:DV2aUlj2xZiuxQyvag8Dy7zjY69ENjS66bWkSfdpddY=
+github.com/linkedin/goavro v2.1.0+incompatible/go.mod h1:bBCwI2eGYpUI/4820s67MElg9tdeLbINjLjiM2xZFYM=
 github.com/magefile/mage v1.9.0/go.mod h1:z5UZb/iS3GoOSn0JgWuiw7dxlurVYTu+/jHXqQg881A=
 github.com/magefile/mage v1.11.0 h1:C/55Ywp9BpgVVclD3lRnSYCwXTYxmSppIgLeDYlNuls=
 github.com/magefile/mage v1.11.0/go.mod h1:z5UZb/iS3GoOSn0JgWuiw7dxlurVYTu+/jHXqQg881A=
@@ -833,6 +844,8 @@ go.opencensus.io v0.21.0/go.mod h1:mSImk1erAIZhrmZN+AvHh14ztQfjbGwt4TtuofqLduU=
 go.opencensus.io v0.22.0/go.mod h1:+kGneAE2xo2IficOXnaByMWTGM9T73dGwxeWcUqIpI8=
 go.opencensus.io v0.22.2 h1:75k/FF0Q2YM8QYo07VPddOLBslDt1MZOdEslOHvmzAs=
 go.opencensus.io v0.22.2/go.mod h1:yxeiOL68Rb0Xd1ddK5vPZ/oVn4vY4Ynel7k9FzqtOIw=
+go.opentelemetry.io/proto/otlp v0.9.0 h1:C0g6TWmQYvjKRnljRULLWUVJGy8Uvu0NEL/5frY2/t4=
+go.opentelemetry.io/proto/otlp v0.9.0/go.mod h1:1vKfU9rv61e9EVGthD1zNvUbiwPcimSsOPU9brfSHJg=
 go.uber.org/atomic v1.5.0 h1:OI5t8sDa1Or+q8AeE+yKeB/SDYioSHAgcVljj9JIETY=
 go.uber.org/atomic v1.5.0/go.mod h1:sABNBOSYdrvTF6hTgEIbc7YasKWGhgEQZyfxyTvoXHQ=
 go.uber.org/goleak v1.0.0 h1:qsup4IcBdlmsnGfqyLl4Ntn3C2XCCuKAE7DwHpScyUo=
@@ -904,6 +917,7 @@ golang.org/x/net v0.0.0-20191209160850-c0dbc17a3553/go.mod h1:z5CRVTTTmAJ677TzLL
 golang.org/x/net v0.0.0-20200202094626-16171245cfb2/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
 golang.org/x/net v0.0.0-20200324143707-d3edc9973b7e/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=
 golang.org/x/net v0.0.0-20200707034311-ab3426394381/go.mod h1:/O7V0waA8r7cgGh81Ro3o1hOxt32SMVPicZroKQ2sZA=
+golang.org/x/net v0.0.0-20200822124328-c89045814202/go.mod h1:/O7V0waA8r7cgGh81Ro3o1hOxt32SMVPicZroKQ2sZA=
 golang.org/x/net v0.0.0-20200904194848-62affa334b73/go.mod h1:/O7V0waA8r7cgGh81Ro3o1hOxt32SMVPicZroKQ2sZA=
 golang.org/x/net v0.0.0-20210226172049-e18ecbb05110 h1:qWPm9rbaAMKs8Bq/9LRpbMqxWRVUAQwMI9fVrssnTfw=
 golang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=
@@ -1005,6 +1019,7 @@ google.golang.org/genproto v0.0.0-20190819201941-24fa4b261c55/go.mod h1:DMBHOl98
 google.golang.org/genproto v0.0.0-20190911173649-1774047e7e51/go.mod h1:IbNlFCBrqXvoKpeg0TB2l7cyZUmoaFKYIwrEpbDKLA8=
 google.golang.org/genproto v0.0.0-20190927181202-20e1ac93f88c/go.mod h1:IbNlFCBrqXvoKpeg0TB2l7cyZUmoaFKYIwrEpbDKLA8=
 google.golang.org/genproto v0.0.0-20191230161307-f3c370f40bfb/go.mod h1:n3cpQtvxv34hfy77yVDNjmbRyujviMdxYliBSkLhpCc=
+google.golang.org/genproto v0.0.0-20200513103714-09dca8ec2884/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=
 google.golang.org/genproto v0.0.0-20200526211855-cb27e3aa2013/go.mod h1:NbSheEEYHJ7i3ixzK3sjbqSGDJWnxyFXZblF3eUsNvo=
 google.golang.org/genproto v0.0.0-20210303154014-9728d6b83eeb h1:hcskBH5qZCOa7WpTUFUFvoebnSFZBYpjykLtjIp9DVk=
 google.golang.org/genproto v0.0.0-20210303154014-9728d6b83eeb/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=
@@ -1019,6 +1034,9 @@ google.golang.org/grpc v1.27.0/go.mod h1:qbnxyOmOxrQa7FizSgH+ReBfzJrCY1pSN7KXBS8
 google.golang.org/grpc v1.27.1/go.mod h1:qbnxyOmOxrQa7FizSgH+ReBfzJrCY1pSN7KXBS8abTk=
 google.golang.org/grpc v1.29.1 h1:EC2SB8S04d2r73uptxphDSUG+kTKVgjRPF+N3xpxRB4=
 google.golang.org/grpc v1.29.1/go.mod h1:itym6AZVZYACWQqET3MqgPpjcuV5QH3BxFS3IjizoKk=
+google.golang.org/grpc v1.33.1/go.mod h1:fr5YgcSWrqhRRxogOsw7RzIpsmvOZ6IcH4kBYTpR3n0=
+google.golang.org/grpc v1.37.1 h1:ARnQJNWxGyYJpdf/JXscNlQr/uv607ZPU9Z7ogHi+iI=
+google.golang.org/grpc v1.37.1/go.mod h1:NREThFqKR1f3iQ6oBuvc5LadQuXVGo9rkm5ZGrQdJfM=
 google.golang.org/protobuf v0.0.0-20200109180630-ec00e32a8dfd/go.mod h1:DFci5gLYBciE7Vtevhsrf46CRTquxDuWsQurQQe4oz8=
 google.golang.org/protobuf v0.0.0-20200221191635-4d8936d0db64/go.mod h1:kwYJMbMJ01Woi6D6+Kah6886xMZcty6N08ah7+eCXa0=
 google.golang.org/protobuf v0.0.0-20200228230310-ab0ca4ff8a60/go.mod h1:cfTl7dwQJ+fmap5saPgwCLgHXTUD7jkjRqWcaiX5VyM=
@@ -1030,6 +1048,9 @@ google.golang.org/protobuf v1.23.1-0.20200526195155-81db48ad09cc/go.mod h1:EGpAD
 google.golang.org/protobuf v1.24.0/go.mod h1:r/3tXBNzIEhYS9I1OUVjXDlt8tc493IdKGjtUeSXeh4=
 google.golang.org/protobuf v1.25.0 h1:Ejskq+SyPohKW+1uil0JJMtmHCgJPJ/qWTxr8qp+R4c=
 google.golang.org/protobuf v1.25.0/go.mod h1:9JNX74DMeImyA3h4bdi1ymwjUzf21/xIlbajtzgsN7c=
+google.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=
+google.golang.org/protobuf v1.26.0 h1:bxAC2xTBsZGibn2RTntX0oH50xLsqy1OxA9tTL3p/lk=
+google.golang.org/protobuf v1.26.0/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=
 gopkg.in/airbrake/gobrake.v2 v2.0.9 h1:7z2uVWwn7oVeeugY1DtlPAy5H+KYgB1KeKTnqjNatLo=
 gopkg.in/airbrake/gobrake.v2 v2.0.9/go.mod h1:/h5ZAUhDkGaJfjzjKLSjv6zCL6O0LLBxU4K+aSYdM/U=
 gopkg.in/alecthomas/kingpin.v2 v2.2.6 h1:jMFz6MfLP0/4fUyZle81rXUoxOBFi19VUFKVDOQfozc=
diff --git a/libbeat/outputs/codec/otlp/event.go b/libbeat/outputs/codec/otlp/event.go
new file mode 100644
index 0000000000..500cdf9aea
--- /dev/null
+++ b/libbeat/outputs/codec/otlp/event.go
@@ -0,0 +1,39 @@
+package otlp
+
+import (
+	"github.com/elastic/beats/v7/libbeat/beat"
+	"github.com/elastic/beats/v7/libbeat/common"
+	logsV1 "go.opentelemetry.io/proto/otlp/logs/v1"
+	"time"
+)
+
+
+// Event describes the event structure for events
+// (in-)directly send to logstash
+type event struct {
+	Timestamp time.Time     `struct:"@timestamp"`
+	Meta      meta          `struct:"@metadata"`
+	Fields    common.MapStr `struct:",inline"`
+	logs []*logsV1.ResourceLogs
+}
+
+// Meta defines common event metadata to be stored in '@metadata'
+type meta struct {
+	Beat    string                 `struct:"beat"`
+	Type    string                 `struct:"type"`
+	Version string                 `struct:"version"`
+	Fields  map[string]interface{} `struct:",inline"`
+}
+
+func makeEvent(index, version string, in *beat.Event) event {
+	return event{
+		Timestamp: in.Timestamp,
+		Meta: meta{
+			Beat:    index,
+			Version: version,
+			Type:    "doc",
+			Fields:  in.Meta,
+		},
+		Fields: in.Fields,
+	}
+}
diff --git a/libbeat/outputs/codec/otlp/otlp.go b/libbeat/outputs/codec/otlp/otlp.go
new file mode 100644
index 0000000000..0ed3723c03
--- /dev/null
+++ b/libbeat/outputs/codec/otlp/otlp.go
@@ -0,0 +1,85 @@
+package otlp
+
+import (
+	"bytes"
+	"github.com/elastic/beats/v7/libbeat/logp"
+	//otlplogs "go.opentelemetry.io/proto/otlp/logs/v1"
+
+	"github.com/elastic/beats/v7/libbeat/beat"
+	"github.com/elastic/beats/v7/libbeat/common"
+	"github.com/elastic/beats/v7/libbeat/outputs/codec"
+	"github.com/elastic/go-structform/gotype"
+)
+
+// Encoder for serializing a beat.Event to otlp.
+type Encoder struct {
+	buf    bytes.Buffer
+	folder *gotype.Iterator
+
+	version string
+	//OtlpResourceLogs *otlplogs.ResourceLogs
+	OtlpEncoder Codec
+	config Config
+	logger *logp.Logger
+}
+
+// Config is used to pass encoding parameters to New.
+type Config struct {
+}
+
+var defaultConfig = Config{
+}
+
+func init() {
+	codec.RegisterType("otlp", func(info beat.Info, cfg *common.Config) (codec.Codec, error) {
+		config := defaultConfig
+		if cfg != nil {
+			if err := cfg.Unpack(&config); err != nil {
+				return nil, err
+			}
+		}
+
+		return New(info.Version, config), nil
+	})
+}
+
+// New creates a new otlp Encoder.
+func New(version string, config Config) *Encoder {
+	e := &Encoder{version: version, config: config}
+	e.reset()
+	return e
+}
+
+func (e *Encoder) reset() {
+	//var err error
+	//
+	//if err != nil {
+	//	panic(err)
+	//}
+}
+
+// Encode serializes a beat event to OTLP. It adds additional metadata in the
+// `@metadata` namespace.
+func (e *Encoder) Encode(index string, event *beat.Event) ([]byte, error) {
+	e.buf.Reset()
+	//err := e.folder.Fold(makeEvent(index, e.version, event))
+	//if err != nil {
+	//	e.reset()
+	//	return nil, err
+	//}
+	e.OtlpEncoder = e.OtlpEncoder.NewCodec()
+	buf, er := e.OtlpEncoder.AddLogs(event)
+	if er != nil {
+		e.logger.Warn("Error ", er, "on creating new otlp codec")
+		e.logger.Warn("Beat event is ", event)
+		return nil, er
+	}
+	_ , er = e.OtlpEncoder.Unmarshal(buf)
+
+	//var buf bytes.Buffer
+	//if err = stdjson.Indent(&buf, json, "", "  "); err != nil {
+	//	return nil, err
+	//}
+
+	return buf, nil
+}
diff --git a/libbeat/outputs/codec/otlp/otlpCodec.go b/libbeat/outputs/codec/otlp/otlpCodec.go
new file mode 100644
index 0000000000..b548209e59
--- /dev/null
+++ b/libbeat/outputs/codec/otlp/otlpCodec.go
@@ -0,0 +1,93 @@
+package otlp
+
+import (
+	"github.com/elastic/beats/v7/libbeat/beat"
+	"github.com/golang/protobuf/proto"
+	otlpcommon "go.opentelemetry.io/proto/otlp/common/v1"
+	otlplogs "go.opentelemetry.io/proto/otlp/logs/v1"
+	"sync"
+)
+
+type Codec struct {
+	sync.Mutex
+	OtlpResourceLogs *otlplogs.ResourceLogs
+}
+
+type AttributeValue struct {
+	orig *otlpcommon.AnyValue
+}
+
+type LogRecord struct {
+	orig *otlplogs.LogRecord
+}
+
+
+func (c Codec) NewCodec() Codec {
+	return Codec{OtlpResourceLogs: &otlplogs.ResourceLogs{}}
+}
+
+func (c *Codec) AddLogs(event *beat.Event) ([]byte, error) {
+	//c.OtlpResourceLogs.Reset()
+	c = AddEmptyInstrumentationLibraryLogs(c)
+	c = AddEmptyLogRecord(c)
+	c = AddTimeStamp(event, c)
+	c = PopulateLogRecord(event, c)
+
+
+
+	//c.OtlpResourceLogs, er := addTimestamp();
+	//buf, err := proto.Marshal(c.OtlpResourceLogs)
+	buf, err := Marshaler(c)
+	return buf, err
+}
+
+func (c *Codec) Unmarshal(buf []byte) (*otlplogs.ResourceLogs, error) {
+	ld := &otlplogs.ResourceLogs{}
+	err := proto.Unmarshal(buf, ld)
+	return ld, err
+}
+
+func AddEmptyInstrumentationLibraryLogs(c *Codec) *Codec {
+	c.OtlpResourceLogs.InstrumentationLibraryLogs = append(c.OtlpResourceLogs.InstrumentationLibraryLogs, &otlplogs.InstrumentationLibraryLogs{})
+	return c
+}
+
+func AddEmptyLogRecord(c *Codec) *Codec {
+	c.OtlpResourceLogs.InstrumentationLibraryLogs[0].Logs = append(c.OtlpResourceLogs.InstrumentationLibraryLogs[0].Logs, &otlplogs.LogRecord{})
+	return c
+}
+
+func AddTimeStamp(event *beat.Event, c *Codec) *Codec {
+	c.OtlpResourceLogs.InstrumentationLibraryLogs[0].Logs[0].TimeUnixNano = uint64(event.Timestamp.UnixNano())
+	return c
+}
+
+func PopulateLogRecord(event *beat.Event, c *Codec) *Codec {
+	c.OtlpResourceLogs.InstrumentationLibraryLogs[0].Logs[0].Body = new(otlpcommon.AnyValue)
+	c.OtlpResourceLogs.InstrumentationLibraryLogs[0].Logs[0].Body.Value = &otlpcommon.AnyValue_StringValue{StringValue: event.Fields["message"].(string) }
+	return c
+}
+
+func Marshaler(c *Codec) ([]byte, error){
+	buf, err := proto.Marshal(c.OtlpResourceLogs)
+	return buf,err
+}
+
+//func Body() AttributeValue {
+//	return newAttributeValue(&(*otlplogs.LogRecord))
+//}
+
+func newAttributeValue(orig *otlpcommon.AnyValue) *otlpcommon.AnyValue {
+	return orig
+}
+
+//
+//func addTimestamp(c *Codec, event *beat.Event){
+//
+//}
+
+
+//
+//func createNewOtlpResourceLogs(){
+//
+//}
diff --git a/libbeat/outputs/console/console.go b/libbeat/outputs/console/console.go
index bbce8f449a..9a5d41dfec 100644
--- a/libbeat/outputs/console/console.go
+++ b/libbeat/outputs/console/console.go
@@ -21,6 +21,8 @@ import (
 	"bufio"
 	"context"
 	"fmt"
+	"github.com/golang/protobuf/proto"
+	otlplogs "go.opentelemetry.io/proto/otlp/logs/v1"
 	"os"
 	"runtime"
 	"time"
@@ -129,6 +131,10 @@ var nl = []byte("\n")
 
 func (c *console) publishEvent(event *publisher.Event) bool {
 	serializedEvent, err := c.codec.Encode(c.index, &event.Content)
+	// ld is OTLP unmarshaled log data, added this for test purposes only,
+	// will remove this in final code
+	ld := &otlplogs.ResourceLogs{}
+	_ = proto.Unmarshal(serializedEvent, ld)
 	if err != nil {
 		if !event.Guaranteed() {
 			return false
diff --git a/libbeat/publisher/includes/includes.go b/libbeat/publisher/includes/includes.go
index a14dd16d3b..263ca5e6a1 100644
--- a/libbeat/publisher/includes/includes.go
+++ b/libbeat/publisher/includes/includes.go
@@ -18,6 +18,7 @@
 package includes
 
 import (
+	_ "github.com/elastic/beats/v7/libbeat/outputs/codec/otlp"
 	// import queue types
 	_ "github.com/elastic/beats/v7/libbeat/outputs/codec/format"
 	_ "github.com/elastic/beats/v7/libbeat/outputs/codec/json"
diff --git a/test.patch b/test.patch
new file mode 100644
index 0000000000..241eecb591
--- /dev/null
+++ b/test.patch
@@ -0,0 +1,1203 @@
+diff --git a/filebeat/fb.json b/filebeat/fb.json
+new file mode 100644
+index 0000000000..948640c5ee
+--- /dev/null
++++ b/filebeat/fb.json
+@@ -0,0 +1,229 @@
++{
++    "type": "record",
++    "namespace": "com.ing.log",
++    "name": "LogEvent",
++    "fields": [
++        {
++            "name": "schemaVersion",
++            "type": "long",
++            "default": 3
++        },
++        {
++            "name": "eventClass",
++            "type": {
++                "type": "enum",
++                "namespace": "com.ing.log",
++                "name": "EventClass",
++                "symbols": [
++                    "TECH",
++                    "FUNC",
++                    "AUDIT",
++                    "SECURITY"
++                ]
++            },
++            "default": "TECH"
++        },
++        {
++            "name": "eventType",
++            "type": "string",
++            "default": ""
++        },
++        {
++            "name": "message",
++            "type": "string",
++            "default": ""
++        },
++        {
++            "name": "arguments",
++            "aliases": [
++                "messages"
++            ],
++            "type": {
++                "type": "array",
++                "items": "string"
++            },
++            "default": [
++            ]
++        },
++        {
++            "name": "metrics",
++            "type": {
++                "type": "map",
++                "values": "double"
++            },
++            "default": {
++            }
++        },
++        {
++            "name": "datacenter",
++            "type": "string",
++            "default": ""
++        },
++        {
++            "name": "environment",
++            "type": "string",
++            "default": ""
++        },
++        {
++            "name": "host",
++            "type": "string",
++            "default": ""
++        },
++        {
++            "name": "component",
++            "type": "string",
++            "default": ""
++        },
++        {
++            "name": "componentVersion",
++            "type": "string",
++            "default": ""
++        },
++        {
++            "name": "logger",
++            "type": "string",
++            "default": ""
++        },
++        {
++            "name": "thread",
++            "type": "string",
++            "default": ""
++        },
++        {
++            "type": {
++                "type": "enum",
++                "namespace": "com.ing.log",
++                "name": "LogLevel",
++                "symbols": [
++                    "TRACE",
++                    "DEBUG",
++                    "INFO",
++                    "WARN",
++                    "ERROR"
++                ]
++            },
++            "name": "level",
++            "default": "INFO"
++        },
++        {
++            "name": "cmdbId",
++            "type": "string",
++            "default": ""
++        },
++        {
++            "name": "user",
++            "type": "string",
++            "default": ""
++        },
++        {
++            "name": "executer",
++            "type": "string",
++            "default": ""
++        },
++        {
++            "name": "requestor",
++            "aliases": [
++                "requester"
++            ],
++            "type": "string",
++            "default": ""
++        },
++        {
++            "name": "userSession",
++            "type": "string",
++            "default": ""
++        },
++        {
++            "name": "requesterSession",
++            "type": "string",
++            "default": ""
++        },
++        {
++            "name": "executerSession",
++            "type": "string",
++            "default": ""
++        },
++        {
++            "name": "traceId",
++            "aliases": [
++                "request_id"
++            ],
++            "type": "string",
++            "default": ""
++        },
++        {
++            "name": "transactionId",
++            "type": "string",
++            "default": ""
++        },
++        {
++            "name": "spanId",
++            "type": "string",
++            "default": ""
++        },
++        {
++            "name": "parentSpanId",
++            "type": "string",
++            "default": ""
++        },
++        {
++            "name": "errorCode",
++            "type": "string",
++            "default": ""
++        },
++        {
++            "name": "errorMessage",
++            "type": "string",
++            "default": ""
++        },
++        {
++            "name": "errorTrail",
++            "type": "string",
++            "default": ""
++        },
++        {
++            "name": "stacktrace",
++            "type": "string",
++            "default": ""
++        },
++        {
++            "name": "attributes",
++            "type": {
++                "type": "map",
++                "values": "string"
++            },
++            "default": {
++            }
++        },
++        {
++            "name": "operation",
++            "type": "string",
++            "default": ""
++        },
++        {
++            "name": "hashKey",
++            "type": "string",
++            "default": ""
++        },
++        {
++            "name": "initVector",
++            "type": "string",
++            "default": ""
++        },
++        {
++            "name": "encrypted",
++            "type": "string",
++            "default": ""
++        },
++        {
++            "name": "confidential",
++            "type": {
++                "type": "map",
++                "values": "string"
++            },
++            "default": {}
++        }
++    ]
++}
++
++
+diff --git a/filebeat/filebeat.yml b/filebeat/filebeat.yml
+index 390305dd34..8d7b797b55 100644
+--- a/filebeat/filebeat.yml
++++ b/filebeat/filebeat.yml
+@@ -11,21 +11,24 @@
+ # configuration file.
+ 
+ # ============================== Filebeat inputs ===============================
+-
+ filebeat.inputs:
+-
++  - type: log
++    enabled: true
++    paths:
++      - /Users/shivashr/AppD/root/Log4j2-Sample/logs/*.log
++#filebeat.inputs:
+ # Each - is an input. Most options can be set at the input level, so
+ # you can use different inputs for various configurations.
+ # Below are the input specific configurations.
+ 
+-- type: log
++#- type: log
+ 
+   # Change to true to enable this input configuration.
+-  enabled: false
++#  enabled: false
+ 
+   # Paths that should be crawled and fetched. Glob based paths.
+-  paths:
+-    - /var/log/*.log
++#  paths:
++#    - /var/log/*.log
+     #- c:\programdata\elasticsearch\logs\*
+ 
+   # Exclude lines. A list of regular expressions to match. It drops the lines that are
+@@ -63,14 +66,14 @@ filebeat.inputs:
+   #multiline.match: after
+ 
+ # filestream is an experimental input. It is going to replace log input in the future.
+-- type: filestream
++#- type: filestream
+ 
+   # Change to true to enable this input configuration.
+-  enabled: false
++#  enabled: false
+ 
+   # Paths that should be crawled and fetched. Glob based paths.
+-  paths:
+-    - /var/log/*.log
++#  paths:
++#    - /var/log/*.log
+     #- c:\programdata\elasticsearch\logs\*
+ 
+   # Exclude lines. A list of regular expressions to match. It drops the lines that are
+@@ -105,8 +108,8 @@ filebeat.config.modules:
+ 
+ # ======================= Elasticsearch template setting =======================
+ 
+-setup.template.settings:
+-  index.number_of_shards: 1
++#setup.template.settings:
++#  index.number_of_shards: 1
+   #index.codec: best_compression
+   #_source.enabled: false
+ 
+@@ -116,7 +119,7 @@ setup.template.settings:
+ # The name of the shipper that publishes the network data. It can be used to group
+ # all the transactions sent by a single shipper in the web interface.
+ #name:
+-
++#filebeat.registry_file: registry
+ # The tags of the shipper are included in their own field with each
+ # transaction published.
+ #tags: ["service-X", "web-tier"]
+@@ -142,7 +145,7 @@ setup.template.settings:
+ 
+ # Starting with Beats version 6.0.0, the dashboards are loaded via the Kibana API.
+ # This requires a Kibana endpoint configuration.
+-setup.kibana:
++#setup.kibana:
+ 
+   # Kibana Host
+   # Scheme and port can be left out and will be set to the default (http and 5601)
+@@ -172,10 +175,18 @@ setup.kibana:
+ 
+ # Configure what output to use when sending the data collected by the beat.
+ 
++# console output using json codec
++
++output.console:
++  codec.otlp:
++#    file: "fb.json"
++#    pretty: true
++#    escape_html: false
++
+ # ---------------------------- Elasticsearch Output ----------------------------
+-output.elasticsearch:
++#output.elasticsearch:
+   # Array of hosts to connect to.
+-  hosts: ["localhost:9200"]
++#  hosts: ["localhost:9200"]
+ 
+   # Protocol - either `http` (default) or `https`.
+   #protocol: "https"
+diff --git a/filebeat/main.go b/filebeat/main.go
+index b7f128a266..435dcf4c33 100644
+--- a/filebeat/main.go
++++ b/filebeat/main.go
+@@ -18,6 +18,7 @@
+ package main
+ 
+ import (
++	"fmt"
+ 	"os"
+ 
+ 	"github.com/elastic/beats/v7/filebeat/cmd"
+@@ -33,6 +34,7 @@ import (
+ // Finally, input uses the registrar information, on restart, to
+ // determine where in each file to restart a harvester.
+ func main() {
++	fmt.Fprintf(os.Stderr, "test\n")
+ 	if err := cmd.Filebeat(inputs.Init, cmd.FilebeatSettings()).Execute(); err != nil {
+ 		os.Exit(1)
+ 	}
+diff --git a/go.mod b/go.mod
+index d955e91f4b..821178a417 100644
+--- a/go.mod
++++ b/go.mod
+@@ -89,16 +89,15 @@ require (
+ 	github.com/gofrs/flock v0.7.2-0.20190320160742-5135e617513b
+ 	github.com/gofrs/uuid v3.3.0+incompatible
+ 	github.com/gogo/protobuf v1.3.1
+-	github.com/golang/protobuf v1.4.3
++	github.com/golang/protobuf v1.5.2
+ 	github.com/golang/snappy v0.0.1
+ 	github.com/gomodule/redigo v1.8.3
+ 	github.com/google/flatbuffers v1.7.2-0.20170925184458-7a6b2bf521e9
+-	github.com/google/go-cmp v0.5.2
++	github.com/google/go-cmp v0.5.5
+ 	github.com/google/gopacket v1.1.18-0.20191009163724-0ad7f2610e34
+ 	github.com/google/uuid v1.1.2
+ 	github.com/gorhill/cronexpr v0.0.0-20180427100037-88b0669f7d75
+ 	github.com/gorilla/mux v1.7.2
+-	github.com/grpc-ecosystem/grpc-gateway v1.13.0 // indirect
+ 	github.com/h2non/filetype v1.1.1-0.20201130172452-f60988ab73d5
+ 	github.com/hashicorp/go-multierror v1.1.0
+ 	github.com/hashicorp/go-retryablehttp v0.6.6
+@@ -116,6 +115,7 @@ require (
+ 	github.com/kolide/osquery-go v0.0.0-20200604192029-b019be7063ac
+ 	github.com/konsorten/go-windows-terminal-sequences v1.0.2 // indirect
+ 	github.com/lib/pq v1.1.2-0.20190507191818-2ff3cb3adc01
++	github.com/linkedin/goavro v2.1.0+incompatible // indirect
+ 	github.com/magefile/mage v1.11.0
+ 	github.com/mailru/easyjson v0.7.1 // indirect
+ 	github.com/mattn/go-colorable v0.1.6
+@@ -163,6 +163,7 @@ require (
+ 	go.elastic.co/ecszap v0.3.0
+ 	go.elastic.co/go-licence-detector v0.4.0
+ 	go.etcd.io/bbolt v1.3.4
++	go.opentelemetry.io/proto/otlp v0.9.0 // indirect
+ 	go.uber.org/atomic v1.5.0
+ 	go.uber.org/multierr v1.3.0
+ 	go.uber.org/zap v1.14.0
+@@ -177,8 +178,8 @@ require (
+ 	golang.org/x/tools v0.0.0-20200731060945-b5fad4ed8dd6
+ 	google.golang.org/api v0.15.0
+ 	google.golang.org/genproto v0.0.0-20210303154014-9728d6b83eeb
+-	google.golang.org/grpc v1.29.1
+-	google.golang.org/protobuf v1.25.0
++	google.golang.org/grpc v1.37.1
++	google.golang.org/protobuf v1.26.0
+ 	gopkg.in/inf.v0 v0.9.1
+ 	gopkg.in/jcmturner/gokrb5.v7 v7.5.0
+ 	gopkg.in/mgo.v2 v2.0.0-20160818020120-3f83fa500528
+diff --git a/go.sum b/go.sum
+index dc1deb6297..abefdf2467 100644
+--- a/go.sum
++++ b/go.sum
+@@ -118,6 +118,7 @@ github.com/andrewkroh/sys v0.0.0-20151128191922-287798fe3e43 h1:WFwa9pqou0Nb4Ddf
+ github.com/andrewkroh/sys v0.0.0-20151128191922-287798fe3e43/go.mod h1:tJPYQG4mnMeUtQvQKNkbsFrnmZOg59Qnf8CcctFv5v4=
+ github.com/antihax/optional v0.0.0-20180407024304-ca021399b1a6 h1:uZuxRZCz65cG1o6K/xUqImNcYKtmk9ylqaH0itMSvzA=
+ github.com/antihax/optional v0.0.0-20180407024304-ca021399b1a6/go.mod h1:V8iCPQYkqmusNa815XgQio277wI47sdRh1dUOLdyC6Q=
++github.com/antihax/optional v1.0.0/go.mod h1:uupD/76wgC+ih3iEmQUL+0Ugr19nfwCT1kdvxnR2qWY=
+ github.com/antlr/antlr4 v0.0.0-20200820155224-be881fa6b91d h1:OE3kzLBpy7pOJEzE55j9sdgrSilUPzzj++FWvp1cmIs=
+ github.com/antlr/antlr4 v0.0.0-20200820155224-be881fa6b91d/go.mod h1:T7PbCXFs94rrTttyxjbyT5+/1V8T2TYDejxUfHJjw1Y=
+ github.com/apache/thrift v0.13.1-0.20200603211036-eac4d0c79a5f h1:33BV5v3u8I6dA2dEoPuXWCsAaHHOJfPtdxZhAMQV4uo=
+@@ -178,6 +179,7 @@ github.com/cloudfoundry/sonde-go v0.0.0-20171206171820-b33733203bb4 h1:cWfya7mo/
+ github.com/cloudfoundry/sonde-go v0.0.0-20171206171820-b33733203bb4/go.mod h1:GS0pCHd7onIsewbw8Ue9qa9pZPv2V88cUZDttK6KzgI=
+ github.com/cncf/udpa/go v0.0.0-20191209042840-269d4d468f6f h1:WBZRG4aNOuI15bLRrCgN8fCq8E5Xuty6jGbmSNEvSsU=
+ github.com/cncf/udpa/go v0.0.0-20191209042840-269d4d468f6f/go.mod h1:M8M6+tZqaGXZJjfX53e64911xZQV5JYwmTeXPW+k8Sc=
++github.com/cncf/udpa/go v0.0.0-20201120205902-5459f2c99403/go.mod h1:WmhPx2Nbnhtbo57+VJT5O0JRkEi1Wbu0z5j0R8u5Hbk=
+ github.com/codegangsta/inject v0.0.0-20150114235600-33e0aa1cb7c0 h1:sDMmm+q/3+BukdIpxwO365v/Rbspp2Nt5XntgQRXq8Q=
+ github.com/codegangsta/inject v0.0.0-20150114235600-33e0aa1cb7c0/go.mod h1:4Zcjuz89kmFXt9morQgcfYZAYZ5n8WHjt81YYWIwtTM=
+ github.com/containerd/cgroups v0.0.0-20190919134610-bf292b21730f h1:tSNMc+rJDfmYntojat8lljbt1mgKNpTxUZJsSzJ9Y1s=
+@@ -323,6 +325,7 @@ github.com/envoyproxy/go-control-plane v0.9.0/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymF
+ github.com/envoyproxy/go-control-plane v0.9.1-0.20191026205805-5f8ba28d4473/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=
+ github.com/envoyproxy/go-control-plane v0.9.4 h1:rEvIZUSZ3fx39WIi3JkQqQBitGwpELBIYWeBVh6wn+E=
+ github.com/envoyproxy/go-control-plane v0.9.4/go.mod h1:6rpuAdCZL397s3pYoYcLgu1mIlRU8Am5FuJP05cCM98=
++github.com/envoyproxy/go-control-plane v0.9.9-0.20210217033140-668b12f5399d/go.mod h1:cXg6YxExXjJnVBQHBLXeUAgxn2UodCpnH306RInaBQk=
+ github.com/envoyproxy/protoc-gen-validate v0.1.0 h1:EQciDnbrYxy13PgWoY8AqoxGiPrpgBZ1R8UNe3ddc+A=
+ github.com/envoyproxy/protoc-gen-validate v0.1.0/go.mod h1:iSmxcyjqTsJpI2R4NaDN7+kN2VEUnK/pcBlmesArF7c=
+ github.com/evanphx/json-patch v4.9.0+incompatible h1:kLcOMZeuLAJvL2BPWLMIj5oaZQobrkAqrL+WFZwQses=
+@@ -411,6 +414,9 @@ github.com/golang/protobuf v1.4.1/go.mod h1:U8fpvMrcmy5pZrNK1lt4xCsGvpyWQ/VVv6QD
+ github.com/golang/protobuf v1.4.2/go.mod h1:oDoupMAO8OvCJWAcko0GGGIgR6R6ocIYbsSw735rRwI=
+ github.com/golang/protobuf v1.4.3 h1:JjCZWpVbqXDqFVmTfYWEVTMIYrL/NPdPSCHPJ0T/raM=
+ github.com/golang/protobuf v1.4.3/go.mod h1:oDoupMAO8OvCJWAcko0GGGIgR6R6ocIYbsSw735rRwI=
++github.com/golang/protobuf v1.5.0/go.mod h1:FsONVRAS9T7sI+LIUmWTfcYkHO4aIWwzhcaSAoJOfIk=
++github.com/golang/protobuf v1.5.2 h1:ROPKBNFfQgOUMifHyP+KYbvpjbdoFNs+aK7DXlji0Tw=
++github.com/golang/protobuf v1.5.2/go.mod h1:XVQd3VNwM+JqD3oG2Ue2ip4fOMUkwXdXDdiuN0vRsmY=
+ github.com/golang/snappy v0.0.1 h1:Qgr9rKW7uDUkrbSmQeiDsGa8SjGyCOGtuasMWwvp2P4=
+ github.com/golang/snappy v0.0.1/go.mod h1:/XxbfmMg8lxefKM7IXC3fBNl/7bRcc72aCRzEWrmP2Q=
+ github.com/gomodule/redigo v1.8.3 h1:HR0kYDX2RJZvAup8CsiJwxB4dTCSC0AaUq6S4SiLwUc=
+@@ -427,6 +433,8 @@ github.com/google/go-cmp v0.4.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/
+ github.com/google/go-cmp v0.5.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
+ github.com/google/go-cmp v0.5.2 h1:X2ev0eStA3AbceY54o37/0PQ/UWqKEiiO2dKL5OPaFM=
+ github.com/google/go-cmp v0.5.2/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
++github.com/google/go-cmp v0.5.5 h1:Khx7svrCpmxxtHBq5j2mp/xVjsi8hQMfNLvJFAlrGgU=
++github.com/google/go-cmp v0.5.5/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
+ github.com/google/gofuzz v1.0.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=
+ github.com/google/gofuzz v1.1.0 h1:Hsa8mG0dQ46ij8Sl2AYJDUv1oA9/d6Vk+3LG99Oe02g=
+ github.com/google/gofuzz v1.1.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=
+@@ -462,6 +470,7 @@ github.com/gregjones/httpcache v0.0.0-20180305231024-9cad4c3443a7 h1:pdN6V1QBWet
+ github.com/gregjones/httpcache v0.0.0-20180305231024-9cad4c3443a7/go.mod h1:FecbI9+v66THATjSRHfNgh1IVFe/9kFxbXtjV0ctIMA=
+ github.com/grpc-ecosystem/grpc-gateway v1.13.0 h1:sBDQoHXrOlfPobnKw69FIKa1wg9qsLLvvQ/Y19WtFgI=
+ github.com/grpc-ecosystem/grpc-gateway v1.13.0/go.mod h1:8XEsbTttt/W+VvjtQhLACqCisSPWTxCZ7sBRjU6iH9c=
++github.com/grpc-ecosystem/grpc-gateway v1.16.0/go.mod h1:BDjrQk3hbvj6Nolgz8mAMFbcEtjT1g+wF4CSlocrBnw=
+ github.com/h2non/filetype v1.1.1-0.20201130172452-f60988ab73d5 h1:xI88renBpIJws9OfEQq4Dng10OppnY5u9bTok/GDFEI=
+ github.com/h2non/filetype v1.1.1-0.20201130172452-f60988ab73d5/go.mod h1:319b3zT68BvV+WRj7cwy856M2ehB3HqNOt6sy1HndBY=
+ github.com/hashicorp/cronexpr v1.1.0 h1:dnNsWtH0V2ReN7JccYe8m//Bj14+PjJDntR1dz0Cixk=
+@@ -564,6 +573,8 @@ github.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=
+ github.com/lib/pq v1.0.0/go.mod h1:5WUZQaWbwv1U+lTReE5YruASi9Al49XbQIvNi/34Woo=
+ github.com/lib/pq v1.1.2-0.20190507191818-2ff3cb3adc01 h1:EPw7R3OAyxHBCyl0oqh3lUZqS5lu3KSxzzGasE0opXQ=
+ github.com/lib/pq v1.1.2-0.20190507191818-2ff3cb3adc01/go.mod h1:5WUZQaWbwv1U+lTReE5YruASi9Al49XbQIvNi/34Woo=
++github.com/linkedin/goavro v2.1.0+incompatible h1:DV2aUlj2xZiuxQyvag8Dy7zjY69ENjS66bWkSfdpddY=
++github.com/linkedin/goavro v2.1.0+incompatible/go.mod h1:bBCwI2eGYpUI/4820s67MElg9tdeLbINjLjiM2xZFYM=
+ github.com/magefile/mage v1.9.0/go.mod h1:z5UZb/iS3GoOSn0JgWuiw7dxlurVYTu+/jHXqQg881A=
+ github.com/magefile/mage v1.11.0 h1:C/55Ywp9BpgVVclD3lRnSYCwXTYxmSppIgLeDYlNuls=
+ github.com/magefile/mage v1.11.0/go.mod h1:z5UZb/iS3GoOSn0JgWuiw7dxlurVYTu+/jHXqQg881A=
+@@ -833,6 +844,8 @@ go.opencensus.io v0.21.0/go.mod h1:mSImk1erAIZhrmZN+AvHh14ztQfjbGwt4TtuofqLduU=
+ go.opencensus.io v0.22.0/go.mod h1:+kGneAE2xo2IficOXnaByMWTGM9T73dGwxeWcUqIpI8=
+ go.opencensus.io v0.22.2 h1:75k/FF0Q2YM8QYo07VPddOLBslDt1MZOdEslOHvmzAs=
+ go.opencensus.io v0.22.2/go.mod h1:yxeiOL68Rb0Xd1ddK5vPZ/oVn4vY4Ynel7k9FzqtOIw=
++go.opentelemetry.io/proto/otlp v0.9.0 h1:C0g6TWmQYvjKRnljRULLWUVJGy8Uvu0NEL/5frY2/t4=
++go.opentelemetry.io/proto/otlp v0.9.0/go.mod h1:1vKfU9rv61e9EVGthD1zNvUbiwPcimSsOPU9brfSHJg=
+ go.uber.org/atomic v1.5.0 h1:OI5t8sDa1Or+q8AeE+yKeB/SDYioSHAgcVljj9JIETY=
+ go.uber.org/atomic v1.5.0/go.mod h1:sABNBOSYdrvTF6hTgEIbc7YasKWGhgEQZyfxyTvoXHQ=
+ go.uber.org/goleak v1.0.0 h1:qsup4IcBdlmsnGfqyLl4Ntn3C2XCCuKAE7DwHpScyUo=
+@@ -904,6 +917,7 @@ golang.org/x/net v0.0.0-20191209160850-c0dbc17a3553/go.mod h1:z5CRVTTTmAJ677TzLL
+ golang.org/x/net v0.0.0-20200202094626-16171245cfb2/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
+ golang.org/x/net v0.0.0-20200324143707-d3edc9973b7e/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=
+ golang.org/x/net v0.0.0-20200707034311-ab3426394381/go.mod h1:/O7V0waA8r7cgGh81Ro3o1hOxt32SMVPicZroKQ2sZA=
++golang.org/x/net v0.0.0-20200822124328-c89045814202/go.mod h1:/O7V0waA8r7cgGh81Ro3o1hOxt32SMVPicZroKQ2sZA=
+ golang.org/x/net v0.0.0-20200904194848-62affa334b73/go.mod h1:/O7V0waA8r7cgGh81Ro3o1hOxt32SMVPicZroKQ2sZA=
+ golang.org/x/net v0.0.0-20210226172049-e18ecbb05110 h1:qWPm9rbaAMKs8Bq/9LRpbMqxWRVUAQwMI9fVrssnTfw=
+ golang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=
+@@ -1005,6 +1019,7 @@ google.golang.org/genproto v0.0.0-20190819201941-24fa4b261c55/go.mod h1:DMBHOl98
+ google.golang.org/genproto v0.0.0-20190911173649-1774047e7e51/go.mod h1:IbNlFCBrqXvoKpeg0TB2l7cyZUmoaFKYIwrEpbDKLA8=
+ google.golang.org/genproto v0.0.0-20190927181202-20e1ac93f88c/go.mod h1:IbNlFCBrqXvoKpeg0TB2l7cyZUmoaFKYIwrEpbDKLA8=
+ google.golang.org/genproto v0.0.0-20191230161307-f3c370f40bfb/go.mod h1:n3cpQtvxv34hfy77yVDNjmbRyujviMdxYliBSkLhpCc=
++google.golang.org/genproto v0.0.0-20200513103714-09dca8ec2884/go.mod h1:55QSHmfGQM9UVYDPBsyGGes0y52j32PQ3BqQfXhyH3c=
+ google.golang.org/genproto v0.0.0-20200526211855-cb27e3aa2013/go.mod h1:NbSheEEYHJ7i3ixzK3sjbqSGDJWnxyFXZblF3eUsNvo=
+ google.golang.org/genproto v0.0.0-20210303154014-9728d6b83eeb h1:hcskBH5qZCOa7WpTUFUFvoebnSFZBYpjykLtjIp9DVk=
+ google.golang.org/genproto v0.0.0-20210303154014-9728d6b83eeb/go.mod h1:FWY/as6DDZQgahTzZj3fqbO1CbirC29ZNUFHwi0/+no=
+@@ -1019,6 +1034,9 @@ google.golang.org/grpc v1.27.0/go.mod h1:qbnxyOmOxrQa7FizSgH+ReBfzJrCY1pSN7KXBS8
+ google.golang.org/grpc v1.27.1/go.mod h1:qbnxyOmOxrQa7FizSgH+ReBfzJrCY1pSN7KXBS8abTk=
+ google.golang.org/grpc v1.29.1 h1:EC2SB8S04d2r73uptxphDSUG+kTKVgjRPF+N3xpxRB4=
+ google.golang.org/grpc v1.29.1/go.mod h1:itym6AZVZYACWQqET3MqgPpjcuV5QH3BxFS3IjizoKk=
++google.golang.org/grpc v1.33.1/go.mod h1:fr5YgcSWrqhRRxogOsw7RzIpsmvOZ6IcH4kBYTpR3n0=
++google.golang.org/grpc v1.37.1 h1:ARnQJNWxGyYJpdf/JXscNlQr/uv607ZPU9Z7ogHi+iI=
++google.golang.org/grpc v1.37.1/go.mod h1:NREThFqKR1f3iQ6oBuvc5LadQuXVGo9rkm5ZGrQdJfM=
+ google.golang.org/protobuf v0.0.0-20200109180630-ec00e32a8dfd/go.mod h1:DFci5gLYBciE7Vtevhsrf46CRTquxDuWsQurQQe4oz8=
+ google.golang.org/protobuf v0.0.0-20200221191635-4d8936d0db64/go.mod h1:kwYJMbMJ01Woi6D6+Kah6886xMZcty6N08ah7+eCXa0=
+ google.golang.org/protobuf v0.0.0-20200228230310-ab0ca4ff8a60/go.mod h1:cfTl7dwQJ+fmap5saPgwCLgHXTUD7jkjRqWcaiX5VyM=
+@@ -1030,6 +1048,9 @@ google.golang.org/protobuf v1.23.1-0.20200526195155-81db48ad09cc/go.mod h1:EGpAD
+ google.golang.org/protobuf v1.24.0/go.mod h1:r/3tXBNzIEhYS9I1OUVjXDlt8tc493IdKGjtUeSXeh4=
+ google.golang.org/protobuf v1.25.0 h1:Ejskq+SyPohKW+1uil0JJMtmHCgJPJ/qWTxr8qp+R4c=
+ google.golang.org/protobuf v1.25.0/go.mod h1:9JNX74DMeImyA3h4bdi1ymwjUzf21/xIlbajtzgsN7c=
++google.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=
++google.golang.org/protobuf v1.26.0 h1:bxAC2xTBsZGibn2RTntX0oH50xLsqy1OxA9tTL3p/lk=
++google.golang.org/protobuf v1.26.0/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=
+ gopkg.in/airbrake/gobrake.v2 v2.0.9 h1:7z2uVWwn7oVeeugY1DtlPAy5H+KYgB1KeKTnqjNatLo=
+ gopkg.in/airbrake/gobrake.v2 v2.0.9/go.mod h1:/h5ZAUhDkGaJfjzjKLSjv6zCL6O0LLBxU4K+aSYdM/U=
+ gopkg.in/alecthomas/kingpin.v2 v2.2.6 h1:jMFz6MfLP0/4fUyZle81rXUoxOBFi19VUFKVDOQfozc=
+diff --git a/libbeat/outputs/codec/avro/avro.go b/libbeat/outputs/codec/avro/avro.go
+new file mode 100644
+index 0000000000..680ec48972
+--- /dev/null
++++ b/libbeat/outputs/codec/avro/avro.go
+@@ -0,0 +1,165 @@
++// Licensed to Elasticsearch B.V. under one or more contributor
++// license agreements. See the NOTICE file distributed with
++// this work for additional information regarding copyright
++// ownership. Elasticsearch B.V. licenses this file to you under
++// the Apache License, Version 2.0 (the "License"); you may
++// not use this file except in compliance with the License.
++// You may obtain a copy of the License at
++//
++//     http://www.apache.org/licenses/LICENSE-2.0
++//
++// Unless required by applicable law or agreed to in writing,
++// software distributed under the License is distributed on an
++// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
++// KIND, either express or implied.  See the License for the
++// specific language governing permissions and limitations
++// under the License.
++
++package avro
++
++import (
++	"bytes"
++	"fmt"
++	"io/ioutil"
++	"os"
++	"time"
++
++	"github.com/elastic/beats/v7/libbeat/logp"
++
++	"github.com/elastic/go-structform/gotype"
++
++	"github.com/elastic/beats/v7/libbeat/beat"
++	"github.com/elastic/beats/v7/libbeat/common"
++	"github.com/elastic/beats/v7/libbeat/outputs/codec"
++	"github.com/linkedin/goavro"
++)
++
++// Encoder for serializing a beat.Event to avro.
++type Encoder struct {
++	buf    bytes.Buffer
++	folder *gotype.Iterator
++
++	version     string
++	config      config
++	AvroEncoder *goavro.Codec
++	logger      *logp.Logger
++}
++
++type config struct {
++	File string
++}
++
++var defaultConfig = config{
++}
++
++func init() {
++
++	codec.RegisterType("avro", func(info beat.Info, cfg *common.Config) (codec.Codec, error) {
++		config := defaultConfig
++		if cfg != nil {
++			if err := cfg.Unpack(&config); err != nil {
++				return nil, err
++			}
++		}
++
++		return New(config.File, info.Version), nil
++	})
++}
++
++// New creates a new avro Encoder.
++func New(file, version string) *Encoder {
++
++	buffer, er := ioutil.ReadFile(file)
++	if er != nil {
++		fmt.Println(er)
++	}
++	avroCodec, err := goavro.NewCodec(string(buffer))
++	if err != nil {
++		fmt.Println("AVRO Codec not loaded", err)
++	}
++	//	fmt.Println("AVRO SCHEMA ", avroCodec.Schema())
++
++	e := &Encoder{version: version, config: config{
++		File: file,
++	}, AvroEncoder: avroCodec, logger: logp.NewLogger("avro-codec")}
++	e.reset()
++	return e
++}
++
++func (e *Encoder) reset() {
++	/*	visitor := avro.NewVisitor(&e.buf)
++		visitor.SetEscapeHTML(e.config.EscapeHTML)*/
++
++	var err error
++	/*
++		// create new encoder with custom time.Time encoding
++		e.folder, err = gotype.NewIterator(visitor,
++			gotype.Folders(
++				codec.MakeTimestampEncoder(),
++				codec.MakeBCTimestampEncoder(),
++			),
++		)*/
++	if err != nil {
++		panic(err)
++	}
++}
++
++// Encode serializes a beat event to avro. It adds additional metadata in the
++// `@metadata` namespace.
++func (e *Encoder) Encode(index string, event *beat.Event) ([]byte, error) {
++	e.logger.Debug(" encoding ", event.Fields)
++
++	e.buf.Reset()
++	/*
++		textual := []byte(`{"timestamp":1000000,"component":"avro","message":"hello world"}`)
++
++		// Convert textual Avro data (in Avro JSON format) to native Go form
++		_, _, err := e.AvroEncoder.NativeFromTextual(textual)
++		if err != nil {
++			e.logger.Warn("NativeFromTextual", err)
++			return nil, err
++		}
++	*/
++	m := make(map[string]interface{})
++
++	found, _ := event.Fields.HasKey("timestamp")
++	if !found {
++//		event.PutValue("timestamp", time.Now().UnixNano()/1000000)
++		event.PutValue("timestamp", time.Now())
++	}
++
++	hasHost, _ := event.Fields.HasKey("host")
++	if hasHost {
++		valueHost, _ := event.GetValue("host")
++		switch valueHost.(type) {
++		case string: // do nothing it's ok
++			{
++			}
++		default:
++			{
++				hostName, _ := os.Hostname()
++				event.PutValue("host", hostName)
++			}
++		}
++	} else {
++		hostName, _ := os.Hostname()
++		event.PutValue("host", hostName)
++	}
++
++	for k, v := range event.Fields {
++		m[k] = v
++	}
++
++	buf, er := e.AvroEncoder.BinaryFromNative(nil, m)
++	if er != nil {
++		e.logger.Warn("BinaryFromNative", er)
++		e.logger.Warn(" content ", m)
++		return nil, er
++	}
++
++	if e.logger.IsDebug() {
++		n, _, _ := e.AvroEncoder.NativeFromBinary(buf)
++		e.logger.Debug(" returning ", n)
++	}
++	return buf, nil
++}
+diff --git a/libbeat/outputs/codec/avro/event.go b/libbeat/outputs/codec/avro/event.go
+new file mode 100644
+index 0000000000..435dc3942b
+--- /dev/null
++++ b/libbeat/outputs/codec/avro/event.go
+@@ -0,0 +1,54 @@
++// Licensed to Elasticsearch B.V. under one or more contributor
++// license agreements. See the NOTICE file distributed with
++// this work for additional information regarding copyright
++// ownership. Elasticsearch B.V. licenses this file to you under
++// the Apache License, Version 2.0 (the "License"); you may
++// not use this file except in compliance with the License.
++// You may obtain a copy of the License at
++//
++//     http://www.apache.org/licenses/LICENSE-2.0
++//
++// Unless required by applicable law or agreed to in writing,
++// software distributed under the License is distributed on an
++// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
++// KIND, either express or implied.  See the License for the
++// specific language governing permissions and limitations
++// under the License.
++
++package avro
++
++import (
++	"time"
++
++	"github.com/elastic/beats/v7/libbeat/beat"
++	"github.com/elastic/beats/v7/libbeat/common"
++)
++
++// Event describes the event structure for events
++// (in-)directly send to logstash
++type event struct {
++	Timestamp time.Time     `struct:"@timestamp"`
++	Meta      meta          `struct:"@metadata"`
++	Fields    common.MapStr `struct:",inline"`
++}
++
++// Meta defines common event metadata to be stored in '@metadata'
++type meta struct {
++	Beat    string                 `struct:"beat"`
++	Type    string                 `struct:"type"`
++	Version string                 `struct:"version"`
++	Fields  map[string]interface{} `struct:",inline"`
++}
++
++func makeEvent(index, version string, in *beat.Event) event {
++	return event{
++		Timestamp: in.Timestamp,
++		Meta: meta{
++			Beat:    index,
++			Version: version,
++			Type:    "doc",
++			Fields:  in.Meta,
++		},
++		Fields: in.Fields,
++	}
++}
+diff --git a/libbeat/outputs/codec/otlp/event.go b/libbeat/outputs/codec/otlp/event.go
+new file mode 100644
+index 0000000000..500cdf9aea
+--- /dev/null
++++ b/libbeat/outputs/codec/otlp/event.go
+@@ -0,0 +1,39 @@
++package otlp
++
++import (
++	"github.com/elastic/beats/v7/libbeat/beat"
++	"github.com/elastic/beats/v7/libbeat/common"
++	logsV1 "go.opentelemetry.io/proto/otlp/logs/v1"
++	"time"
++)
++
++
++// Event describes the event structure for events
++// (in-)directly send to logstash
++type event struct {
++	Timestamp time.Time     `struct:"@timestamp"`
++	Meta      meta          `struct:"@metadata"`
++	Fields    common.MapStr `struct:",inline"`
++	logs []*logsV1.ResourceLogs
++}
++
++// Meta defines common event metadata to be stored in '@metadata'
++type meta struct {
++	Beat    string                 `struct:"beat"`
++	Type    string                 `struct:"type"`
++	Version string                 `struct:"version"`
++	Fields  map[string]interface{} `struct:",inline"`
++}
++
++func makeEvent(index, version string, in *beat.Event) event {
++	return event{
++		Timestamp: in.Timestamp,
++		Meta: meta{
++			Beat:    index,
++			Version: version,
++			Type:    "doc",
++			Fields:  in.Meta,
++		},
++		Fields: in.Fields,
++	}
++}
+diff --git a/libbeat/outputs/codec/otlp/otlp.go b/libbeat/outputs/codec/otlp/otlp.go
+new file mode 100644
+index 0000000000..0ed3723c03
+--- /dev/null
++++ b/libbeat/outputs/codec/otlp/otlp.go
+@@ -0,0 +1,85 @@
++package otlp
++
++import (
++	"bytes"
++	"github.com/elastic/beats/v7/libbeat/logp"
++	//otlplogs "go.opentelemetry.io/proto/otlp/logs/v1"
++
++	"github.com/elastic/beats/v7/libbeat/beat"
++	"github.com/elastic/beats/v7/libbeat/common"
++	"github.com/elastic/beats/v7/libbeat/outputs/codec"
++	"github.com/elastic/go-structform/gotype"
++)
++
++// Encoder for serializing a beat.Event to otlp.
++type Encoder struct {
++	buf    bytes.Buffer
++	folder *gotype.Iterator
++
++	version string
++	//OtlpResourceLogs *otlplogs.ResourceLogs
++	OtlpEncoder Codec
++	config Config
++	logger *logp.Logger
++}
++
++// Config is used to pass encoding parameters to New.
++type Config struct {
++}
++
++var defaultConfig = Config{
++}
++
++func init() {
++	codec.RegisterType("otlp", func(info beat.Info, cfg *common.Config) (codec.Codec, error) {
++		config := defaultConfig
++		if cfg != nil {
++			if err := cfg.Unpack(&config); err != nil {
++				return nil, err
++			}
++		}
++
++		return New(info.Version, config), nil
++	})
++}
++
++// New creates a new otlp Encoder.
++func New(version string, config Config) *Encoder {
++	e := &Encoder{version: version, config: config}
++	e.reset()
++	return e
++}
++
++func (e *Encoder) reset() {
++	//var err error
++	//
++	//if err != nil {
++	//	panic(err)
++	//}
++}
++
++// Encode serializes a beat event to OTLP. It adds additional metadata in the
++// `@metadata` namespace.
++func (e *Encoder) Encode(index string, event *beat.Event) ([]byte, error) {
++	e.buf.Reset()
++	//err := e.folder.Fold(makeEvent(index, e.version, event))
++	//if err != nil {
++	//	e.reset()
++	//	return nil, err
++	//}
++	e.OtlpEncoder = e.OtlpEncoder.NewCodec()
++	buf, er := e.OtlpEncoder.AddLogs(event)
++	if er != nil {
++		e.logger.Warn("Error ", er, "on creating new otlp codec")
++		e.logger.Warn("Beat event is ", event)
++		return nil, er
++	}
++	_ , er = e.OtlpEncoder.Unmarshal(buf)
++
++	//var buf bytes.Buffer
++	//if err = stdjson.Indent(&buf, json, "", "  "); err != nil {
++	//	return nil, err
++	//}
++
++	return buf, nil
++}
+diff --git a/libbeat/outputs/codec/otlp/otlpCodec.go b/libbeat/outputs/codec/otlp/otlpCodec.go
+new file mode 100644
+index 0000000000..b548209e59
+--- /dev/null
++++ b/libbeat/outputs/codec/otlp/otlpCodec.go
+@@ -0,0 +1,93 @@
++package otlp
++
++import (
++	"github.com/elastic/beats/v7/libbeat/beat"
++	"github.com/golang/protobuf/proto"
++	otlpcommon "go.opentelemetry.io/proto/otlp/common/v1"
++	otlplogs "go.opentelemetry.io/proto/otlp/logs/v1"
++	"sync"
++)
++
++type Codec struct {
++	sync.Mutex
++	OtlpResourceLogs *otlplogs.ResourceLogs
++}
++
++type AttributeValue struct {
++	orig *otlpcommon.AnyValue
++}
++
++type LogRecord struct {
++	orig *otlplogs.LogRecord
++}
++
++
++func (c Codec) NewCodec() Codec {
++	return Codec{OtlpResourceLogs: &otlplogs.ResourceLogs{}}
++}
++
++func (c *Codec) AddLogs(event *beat.Event) ([]byte, error) {
++	//c.OtlpResourceLogs.Reset()
++	c = AddEmptyInstrumentationLibraryLogs(c)
++	c = AddEmptyLogRecord(c)
++	c = AddTimeStamp(event, c)
++	c = PopulateLogRecord(event, c)
++
++
++
++	//c.OtlpResourceLogs, er := addTimestamp();
++	//buf, err := proto.Marshal(c.OtlpResourceLogs)
++	buf, err := Marshaler(c)
++	return buf, err
++}
++
++func (c *Codec) Unmarshal(buf []byte) (*otlplogs.ResourceLogs, error) {
++	ld := &otlplogs.ResourceLogs{}
++	err := proto.Unmarshal(buf, ld)
++	return ld, err
++}
++
++func AddEmptyInstrumentationLibraryLogs(c *Codec) *Codec {
++	c.OtlpResourceLogs.InstrumentationLibraryLogs = append(c.OtlpResourceLogs.InstrumentationLibraryLogs, &otlplogs.InstrumentationLibraryLogs{})
++	return c
++}
++
++func AddEmptyLogRecord(c *Codec) *Codec {
++	c.OtlpResourceLogs.InstrumentationLibraryLogs[0].Logs = append(c.OtlpResourceLogs.InstrumentationLibraryLogs[0].Logs, &otlplogs.LogRecord{})
++	return c
++}
++
++func AddTimeStamp(event *beat.Event, c *Codec) *Codec {
++	c.OtlpResourceLogs.InstrumentationLibraryLogs[0].Logs[0].TimeUnixNano = uint64(event.Timestamp.UnixNano())
++	return c
++}
++
++func PopulateLogRecord(event *beat.Event, c *Codec) *Codec {
++	c.OtlpResourceLogs.InstrumentationLibraryLogs[0].Logs[0].Body = new(otlpcommon.AnyValue)
++	c.OtlpResourceLogs.InstrumentationLibraryLogs[0].Logs[0].Body.Value = &otlpcommon.AnyValue_StringValue{StringValue: event.Fields["message"].(string) }
++	return c
++}
++
++func Marshaler(c *Codec) ([]byte, error){
++	buf, err := proto.Marshal(c.OtlpResourceLogs)
++	return buf,err
++}
++
++//func Body() AttributeValue {
++//	return newAttributeValue(&(*otlplogs.LogRecord))
++//}
++
++func newAttributeValue(orig *otlpcommon.AnyValue) *otlpcommon.AnyValue {
++	return orig
++}
++
++//
++//func addTimestamp(c *Codec, event *beat.Event){
++//
++//}
++
++
++//
++//func createNewOtlpResourceLogs(){
++//
++//}
+diff --git a/libbeat/outputs/console/console.go b/libbeat/outputs/console/console.go
+index bbce8f449a..9a5d41dfec 100644
+--- a/libbeat/outputs/console/console.go
++++ b/libbeat/outputs/console/console.go
+@@ -21,6 +21,8 @@ import (
+ 	"bufio"
+ 	"context"
+ 	"fmt"
++	"github.com/golang/protobuf/proto"
++	otlplogs "go.opentelemetry.io/proto/otlp/logs/v1"
+ 	"os"
+ 	"runtime"
+ 	"time"
+@@ -129,6 +131,10 @@ var nl = []byte("\n")
+ 
+ func (c *console) publishEvent(event *publisher.Event) bool {
+ 	serializedEvent, err := c.codec.Encode(c.index, &event.Content)
++	// ld is OTLP unmarshaled log data, added this for test purposes only,
++	// will remove this in final code
++	ld := &otlplogs.ResourceLogs{}
++	_ = proto.Unmarshal(serializedEvent, ld)
+ 	if err != nil {
+ 		if !event.Guaranteed() {
+ 			return false
+diff --git a/libbeat/publisher/includes/includes.go b/libbeat/publisher/includes/includes.go
+index a14dd16d3b..ce5258e676 100644
+--- a/libbeat/publisher/includes/includes.go
++++ b/libbeat/publisher/includes/includes.go
+@@ -18,6 +18,8 @@
+ package includes
+ 
+ import (
++	_ "github.com/elastic/beats/v7/libbeat/outputs/codec/avro"
++	_ "github.com/elastic/beats/v7/libbeat/outputs/codec/otlp"
+ 	// import queue types
+ 	_ "github.com/elastic/beats/v7/libbeat/outputs/codec/format"
+ 	_ "github.com/elastic/beats/v7/libbeat/outputs/codec/json"
+diff --git a/test.patch b/test.patch
+new file mode 100644
+index 0000000000..4d2fc3d453
+--- /dev/null
++++ b/test.patch
+@@ -0,0 +1,176 @@
++diff --git a/libbeat/outputs/codec/otlp/otlp.go b/libbeat/outputs/codec/otlp/otlp.go
++index 3e4120f87d..85b2c153a2 100644
++--- a/libbeat/outputs/codec/otlp/otlp.go
+++++ b/libbeat/outputs/codec/otlp/otlp.go
++@@ -18,7 +18,7 @@ type Encoder struct {
++ 
++ 	version string
++ 	//OtlpResourceLogs *otlplogs.ResourceLogs
++-	OtlpEncoder *Codec
+++	OtlpEncoder Codec
++ 	config Config
++ 	logger *logp.Logger
++ }
++@@ -62,17 +62,19 @@ func (e *Encoder) reset() {
++ // `@metadata` namespace.
++ func (e *Encoder) Encode(index string, event *beat.Event) ([]byte, error) {
++ 	e.buf.Reset()
++-	err := e.folder.Fold(makeEvent(index, e.version, event))
++-	if err != nil {
++-		e.reset()
++-		return nil, err
++-	}
++-	buf, er := e.OtlpEncoder.NewCodec(event)
+++	//err := e.folder.Fold(makeEvent(index, e.version, event))
+++	//if err != nil {
+++	//	e.reset()
+++	//	return nil, err
+++	//}
+++	e.OtlpEncoder = e.OtlpEncoder.NewCodec()
+++	buf, er := e.OtlpEncoder.AddLogs(event)
++ 	if er != nil {
++ 		e.logger.Warn("Error ", er, "on creating new otlp codec")
++ 		e.logger.Warn("Beat event is ", event)
++ 		return nil, er
++ 	}
+++	_ , er = e.OtlpEncoder.Unmarshal(buf)
++ 
++ 	//var buf bytes.Buffer
++ 	//if err = stdjson.Indent(&buf, json, "", "  "); err != nil {
++diff --git a/libbeat/outputs/codec/otlp/otlpCodec.go b/libbeat/outputs/codec/otlp/otlpCodec.go
++index 5e489b073b..b548209e59 100644
++--- a/libbeat/outputs/codec/otlp/otlpCodec.go
+++++ b/libbeat/outputs/codec/otlp/otlpCodec.go
++@@ -3,27 +3,90 @@ package otlp
++ import (
++ 	"github.com/elastic/beats/v7/libbeat/beat"
++ 	"github.com/golang/protobuf/proto"
+++	otlpcommon "go.opentelemetry.io/proto/otlp/common/v1"
++ 	otlplogs "go.opentelemetry.io/proto/otlp/logs/v1"
+++	"sync"
++ )
++ 
++ type Codec struct {
++-	//sync.Mutex
+++	sync.Mutex
++ 	OtlpResourceLogs *otlplogs.ResourceLogs
++ }
++ 
+++type AttributeValue struct {
+++	orig *otlpcommon.AnyValue
+++}
+++
+++type LogRecord struct {
+++	orig *otlplogs.LogRecord
+++}
+++
+++
+++func (c Codec) NewCodec() Codec {
+++	return Codec{OtlpResourceLogs: &otlplogs.ResourceLogs{}}
+++}
+++
+++func (c *Codec) AddLogs(event *beat.Event) ([]byte, error) {
+++	//c.OtlpResourceLogs.Reset()
+++	c = AddEmptyInstrumentationLibraryLogs(c)
+++	c = AddEmptyLogRecord(c)
+++	c = AddTimeStamp(event, c)
+++	c = PopulateLogRecord(event, c)
+++
++ 
++ 
++-func (c *Codec) NewCodec(event *beat.Event) ([]byte, error) {
++-	c.OtlpResourceLogs.Reset()
++-	c.OtlpResourceLogs.InstrumentationLibraryLogs[0].Logs[0].TimeUnixNano = uint64(event.Timestamp.UnixNano())
++ 	//c.OtlpResourceLogs, er := addTimestamp();
++-	buf, err := proto.Marshal(c.OtlpResourceLogs)
+++	//buf, err := proto.Marshal(c.OtlpResourceLogs)
+++	buf, err := Marshaler(c)
++ 	return buf, err
++ }
+++
+++func (c *Codec) Unmarshal(buf []byte) (*otlplogs.ResourceLogs, error) {
+++	ld := &otlplogs.ResourceLogs{}
+++	err := proto.Unmarshal(buf, ld)
+++	return ld, err
+++}
+++
+++func AddEmptyInstrumentationLibraryLogs(c *Codec) *Codec {
+++	c.OtlpResourceLogs.InstrumentationLibraryLogs = append(c.OtlpResourceLogs.InstrumentationLibraryLogs, &otlplogs.InstrumentationLibraryLogs{})
+++	return c
+++}
+++
+++func AddEmptyLogRecord(c *Codec) *Codec {
+++	c.OtlpResourceLogs.InstrumentationLibraryLogs[0].Logs = append(c.OtlpResourceLogs.InstrumentationLibraryLogs[0].Logs, &otlplogs.LogRecord{})
+++	return c
+++}
+++
+++func AddTimeStamp(event *beat.Event, c *Codec) *Codec {
+++	c.OtlpResourceLogs.InstrumentationLibraryLogs[0].Logs[0].TimeUnixNano = uint64(event.Timestamp.UnixNano())
+++	return c
+++}
+++
+++func PopulateLogRecord(event *beat.Event, c *Codec) *Codec {
+++	c.OtlpResourceLogs.InstrumentationLibraryLogs[0].Logs[0].Body = new(otlpcommon.AnyValue)
+++	c.OtlpResourceLogs.InstrumentationLibraryLogs[0].Logs[0].Body.Value = &otlpcommon.AnyValue_StringValue{StringValue: event.Fields["message"].(string) }
+++	return c
+++}
+++
+++func Marshaler(c *Codec) ([]byte, error){
+++	buf, err := proto.Marshal(c.OtlpResourceLogs)
+++	return buf,err
+++}
+++
+++//func Body() AttributeValue {
+++//	return newAttributeValue(&(*otlplogs.LogRecord))
+++//}
+++
+++func newAttributeValue(orig *otlpcommon.AnyValue) *otlpcommon.AnyValue {
+++	return orig
+++}
+++
++ //
++-//func addTimestamp(){
+++//func addTimestamp(c *Codec, event *beat.Event){
++ //
++ //}
+++
+++
++ //
++ //func createNewOtlpResourceLogs(){
++ //
++diff --git a/libbeat/outputs/console/console.go b/libbeat/outputs/console/console.go
++index bbce8f449a..9a5d41dfec 100644
++--- a/libbeat/outputs/console/console.go
+++++ b/libbeat/outputs/console/console.go
++@@ -21,6 +21,8 @@ import (
++ 	"bufio"
++ 	"context"
++ 	"fmt"
+++	"github.com/golang/protobuf/proto"
+++	otlplogs "go.opentelemetry.io/proto/otlp/logs/v1"
++ 	"os"
++ 	"runtime"
++ 	"time"
++@@ -129,6 +131,10 @@ var nl = []byte("\n")
++ 
++ func (c *console) publishEvent(event *publisher.Event) bool {
++ 	serializedEvent, err := c.codec.Encode(c.index, &event.Content)
+++	// ld is OTLP unmarshaled log data, added this for test purposes only,
+++	// will remove this in final code
+++	ld := &otlplogs.ResourceLogs{}
+++	_ = proto.Unmarshal(serializedEvent, ld)
++ 	if err != nil {
++ 		if !event.Guaranteed() {
++ 			return false
++diff --git a/libbeat/publisher/includes/includes.go b/libbeat/publisher/includes/includes.go
++index 68efbbffe8..ce5258e676 100644
++--- a/libbeat/publisher/includes/includes.go
+++++ b/libbeat/publisher/includes/includes.go
++@@ -19,6 +19,7 @@ package includes
++ 
++ import (
++ 	_ "github.com/elastic/beats/v7/libbeat/outputs/codec/avro"
+++	_ "github.com/elastic/beats/v7/libbeat/outputs/codec/otlp"
++ 	// import queue types
++ 	_ "github.com/elastic/beats/v7/libbeat/outputs/codec/format"
++ 	_ "github.com/elastic/beats/v7/libbeat/outputs/codec/json"
